{"ast":null,"code":"'use client';\n\nimport { createContext, useContext } from 'react';\nconst ColorModeContext = createContext({});\nColorModeContext.displayName = \"ColorModeContext\";\nfunction useColorMode() {\n  const context = useContext(ColorModeContext);\n  if (context === void 0) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\");\n  }\n  return context;\n}\nfunction useColorModeValue(light, dark) {\n  const {\n    colorMode\n  } = useColorMode();\n  return colorMode === \"dark\" ? dark : light;\n}\nexport { ColorModeContext, useColorMode, useColorModeValue };","map":{"version":3,"names":["createContext","useContext","ColorModeContext","displayName","useColorMode","context","Error","useColorModeValue","light","dark","colorMode"],"sources":["C:/Users/INTEL/PickRound/pickround-frontend/node_modules/@chakra-ui/react/dist/esm/color-mode/color-mode-context.mjs"],"sourcesContent":["'use client';\r\nimport { createContext, useContext } from 'react';\r\n\r\nconst ColorModeContext = createContext({});\r\nColorModeContext.displayName = \"ColorModeContext\";\r\nfunction useColorMode() {\r\n  const context = useContext(ColorModeContext);\r\n  if (context === void 0) {\r\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\");\r\n  }\r\n  return context;\r\n}\r\nfunction useColorModeValue(light, dark) {\r\n  const { colorMode } = useColorMode();\r\n  return colorMode === \"dark\" ? dark : light;\r\n}\r\n\r\nexport { ColorModeContext, useColorMode, useColorModeValue };\r\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,aAAa,EAAEC,UAAU,QAAQ,OAAO;AAEjD,MAAMC,gBAAgB,GAAGF,aAAa,CAAC,CAAC,CAAC,CAAC;AAC1CE,gBAAgB,CAACC,WAAW,GAAG,kBAAkB;AACjD,SAASC,YAAYA,CAAA,EAAG;EACtB,MAAMC,OAAO,GAAGJ,UAAU,CAACC,gBAAgB,CAAC;EAC5C,IAAIG,OAAO,KAAK,KAAK,CAAC,EAAE;IACtB,MAAM,IAAIC,KAAK,CAAC,sDAAsD,CAAC;EACzE;EACA,OAAOD,OAAO;AAChB;AACA,SAASE,iBAAiBA,CAACC,KAAK,EAAEC,IAAI,EAAE;EACtC,MAAM;IAAEC;EAAU,CAAC,GAAGN,YAAY,CAAC,CAAC;EACpC,OAAOM,SAAS,KAAK,MAAM,GAAGD,IAAI,GAAGD,KAAK;AAC5C;AAEA,SAASN,gBAAgB,EAAEE,YAAY,EAAEG,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}