{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { defineStyle, omitThemingProps } from '@chakra-ui/styled-system';\nimport { cx, dataAttr, callAllHandlers } from '@chakra-ui/utils';\nimport { useState } from 'react';\nimport { AvatarStylesProvider } from './avatar-context.mjs';\nimport { AvatarImage } from './avatar-image.mjs';\nimport { initials } from './avatar-name.mjs';\nimport { GenericAvatarIcon } from './generic-avatar-icon.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { useMultiStyleConfig } from '../system/use-style-config.mjs';\nimport { chakra } from '../system/factory.mjs';\nconst baseStyle = defineStyle({\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n  fontWeight: \"medium\",\n  position: \"relative\",\n  flexShrink: 0\n});\nconst Avatar = forwardRef((props, ref) => {\n  const styles = useMultiStyleConfig(\"Avatar\", props);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const {\n    src,\n    srcSet,\n    name,\n    showBorder,\n    borderRadius = \"full\",\n    onError,\n    onLoad: onLoadProp,\n    getInitials = initials,\n    icon = /* @__PURE__ */jsx(GenericAvatarIcon, {}),\n    iconLabel = \" avatar\",\n    loading,\n    children,\n    borderColor,\n    ignoreFallback,\n    crossOrigin,\n    referrerPolicy,\n    ...rest\n  } = omitThemingProps(props);\n  const avatarStyles = {\n    borderRadius,\n    borderWidth: showBorder ? \"2px\" : void 0,\n    ...baseStyle,\n    ...styles.container\n  };\n  if (borderColor) {\n    avatarStyles.borderColor = borderColor;\n  }\n  return /* @__PURE__ */jsx(chakra.span, {\n    ref,\n    ...rest,\n    className: cx(\"chakra-avatar\", props.className),\n    \"data-loaded\": dataAttr(isLoaded),\n    __css: avatarStyles,\n    children: /* @__PURE__ */jsxs(AvatarStylesProvider, {\n      value: styles,\n      children: [/* @__PURE__ */jsx(AvatarImage, {\n        src,\n        srcSet,\n        loading,\n        onLoad: callAllHandlers(onLoadProp, () => {\n          setIsLoaded(true);\n        }),\n        onError,\n        getInitials,\n        name,\n        borderRadius,\n        icon,\n        iconLabel,\n        ignoreFallback,\n        crossOrigin,\n        referrerPolicy\n      }), children]\n    })\n  });\n});\nAvatar.displayName = \"Avatar\";\nexport { Avatar, baseStyle };","map":{"version":3,"names":["jsx","jsxs","defineStyle","omitThemingProps","cx","dataAttr","callAllHandlers","useState","AvatarStylesProvider","AvatarImage","initials","GenericAvatarIcon","forwardRef","useMultiStyleConfig","chakra","baseStyle","display","alignItems","justifyContent","textAlign","textTransform","fontWeight","position","flexShrink","Avatar","props","ref","styles","isLoaded","setIsLoaded","src","srcSet","name","showBorder","borderRadius","onError","onLoad","onLoadProp","getInitials","icon","iconLabel","loading","children","borderColor","ignoreFallback","crossOrigin","referrerPolicy","rest","avatarStyles","borderWidth","container","span","className","__css","value","displayName"],"sources":["C:/Users/INTEL/PickRound/pickround-frontend/node_modules/@chakra-ui/react/dist/esm/avatar/avatar.mjs"],"sourcesContent":["'use client';\r\nimport { jsx, jsxs } from 'react/jsx-runtime';\r\nimport { defineStyle, omitThemingProps } from '@chakra-ui/styled-system';\r\nimport { cx, dataAttr, callAllHandlers } from '@chakra-ui/utils';\r\nimport { useState } from 'react';\r\nimport { AvatarStylesProvider } from './avatar-context.mjs';\r\nimport { AvatarImage } from './avatar-image.mjs';\r\nimport { initials } from './avatar-name.mjs';\r\nimport { GenericAvatarIcon } from './generic-avatar-icon.mjs';\r\nimport { forwardRef } from '../system/forward-ref.mjs';\r\nimport { useMultiStyleConfig } from '../system/use-style-config.mjs';\r\nimport { chakra } from '../system/factory.mjs';\r\n\r\nconst baseStyle = defineStyle({\r\n  display: \"inline-flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n  textAlign: \"center\",\r\n  textTransform: \"uppercase\",\r\n  fontWeight: \"medium\",\r\n  position: \"relative\",\r\n  flexShrink: 0\r\n});\r\nconst Avatar = forwardRef((props, ref) => {\r\n  const styles = useMultiStyleConfig(\"Avatar\", props);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const {\r\n    src,\r\n    srcSet,\r\n    name,\r\n    showBorder,\r\n    borderRadius = \"full\",\r\n    onError,\r\n    onLoad: onLoadProp,\r\n    getInitials = initials,\r\n    icon = /* @__PURE__ */ jsx(GenericAvatarIcon, {}),\r\n    iconLabel = \" avatar\",\r\n    loading,\r\n    children,\r\n    borderColor,\r\n    ignoreFallback,\r\n    crossOrigin,\r\n    referrerPolicy,\r\n    ...rest\r\n  } = omitThemingProps(props);\r\n  const avatarStyles = {\r\n    borderRadius,\r\n    borderWidth: showBorder ? \"2px\" : void 0,\r\n    ...baseStyle,\r\n    ...styles.container\r\n  };\r\n  if (borderColor) {\r\n    avatarStyles.borderColor = borderColor;\r\n  }\r\n  return /* @__PURE__ */ jsx(\r\n    chakra.span,\r\n    {\r\n      ref,\r\n      ...rest,\r\n      className: cx(\"chakra-avatar\", props.className),\r\n      \"data-loaded\": dataAttr(isLoaded),\r\n      __css: avatarStyles,\r\n      children: /* @__PURE__ */ jsxs(AvatarStylesProvider, { value: styles, children: [\r\n        /* @__PURE__ */ jsx(\r\n          AvatarImage,\r\n          {\r\n            src,\r\n            srcSet,\r\n            loading,\r\n            onLoad: callAllHandlers(onLoadProp, () => {\r\n              setIsLoaded(true);\r\n            }),\r\n            onError,\r\n            getInitials,\r\n            name,\r\n            borderRadius,\r\n            icon,\r\n            iconLabel,\r\n            ignoreFallback,\r\n            crossOrigin,\r\n            referrerPolicy\r\n          }\r\n        ),\r\n        children\r\n      ] })\r\n    }\r\n  );\r\n});\r\nAvatar.displayName = \"Avatar\";\r\n\r\nexport { Avatar, baseStyle };\r\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,GAAG,EAAEC,IAAI,QAAQ,mBAAmB;AAC7C,SAASC,WAAW,EAAEC,gBAAgB,QAAQ,0BAA0B;AACxE,SAASC,EAAE,EAAEC,QAAQ,EAAEC,eAAe,QAAQ,kBAAkB;AAChE,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,oBAAoB,QAAQ,sBAAsB;AAC3D,SAASC,WAAW,QAAQ,oBAAoB;AAChD,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,iBAAiB,QAAQ,2BAA2B;AAC7D,SAASC,UAAU,QAAQ,2BAA2B;AACtD,SAASC,mBAAmB,QAAQ,gCAAgC;AACpE,SAASC,MAAM,QAAQ,uBAAuB;AAE9C,MAAMC,SAAS,GAAGb,WAAW,CAAC;EAC5Bc,OAAO,EAAE,aAAa;EACtBC,UAAU,EAAE,QAAQ;EACpBC,cAAc,EAAE,QAAQ;EACxBC,SAAS,EAAE,QAAQ;EACnBC,aAAa,EAAE,WAAW;EAC1BC,UAAU,EAAE,QAAQ;EACpBC,QAAQ,EAAE,UAAU;EACpBC,UAAU,EAAE;AACd,CAAC,CAAC;AACF,MAAMC,MAAM,GAAGZ,UAAU,CAAC,CAACa,KAAK,EAAEC,GAAG,KAAK;EACxC,MAAMC,MAAM,GAAGd,mBAAmB,CAAC,QAAQ,EAAEY,KAAK,CAAC;EACnD,MAAM,CAACG,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM;IACJuB,GAAG;IACHC,MAAM;IACNC,IAAI;IACJC,UAAU;IACVC,YAAY,GAAG,MAAM;IACrBC,OAAO;IACPC,MAAM,EAAEC,UAAU;IAClBC,WAAW,GAAG5B,QAAQ;IACtB6B,IAAI,GAAG,eAAgBvC,GAAG,CAACW,iBAAiB,EAAE,CAAC,CAAC,CAAC;IACjD6B,SAAS,GAAG,SAAS;IACrBC,OAAO;IACPC,QAAQ;IACRC,WAAW;IACXC,cAAc;IACdC,WAAW;IACXC,cAAc;IACd,GAAGC;EACL,CAAC,GAAG5C,gBAAgB,CAACsB,KAAK,CAAC;EAC3B,MAAMuB,YAAY,GAAG;IACnBd,YAAY;IACZe,WAAW,EAAEhB,UAAU,GAAG,KAAK,GAAG,KAAK,CAAC;IACxC,GAAGlB,SAAS;IACZ,GAAGY,MAAM,CAACuB;EACZ,CAAC;EACD,IAAIP,WAAW,EAAE;IACfK,YAAY,CAACL,WAAW,GAAGA,WAAW;EACxC;EACA,OAAO,eAAgB3C,GAAG,CACxBc,MAAM,CAACqC,IAAI,EACX;IACEzB,GAAG;IACH,GAAGqB,IAAI;IACPK,SAAS,EAAEhD,EAAE,CAAC,eAAe,EAAEqB,KAAK,CAAC2B,SAAS,CAAC;IAC/C,aAAa,EAAE/C,QAAQ,CAACuB,QAAQ,CAAC;IACjCyB,KAAK,EAAEL,YAAY;IACnBN,QAAQ,EAAE,eAAgBzC,IAAI,CAACO,oBAAoB,EAAE;MAAE8C,KAAK,EAAE3B,MAAM;MAAEe,QAAQ,EAAE,CAC9E,eAAgB1C,GAAG,CACjBS,WAAW,EACX;QACEqB,GAAG;QACHC,MAAM;QACNU,OAAO;QACPL,MAAM,EAAE9B,eAAe,CAAC+B,UAAU,EAAE,MAAM;UACxCR,WAAW,CAAC,IAAI,CAAC;QACnB,CAAC,CAAC;QACFM,OAAO;QACPG,WAAW;QACXN,IAAI;QACJE,YAAY;QACZK,IAAI;QACJC,SAAS;QACTI,cAAc;QACdC,WAAW;QACXC;MACF,CACF,CAAC,EACDJ,QAAQ;IACR,CAAC;EACL,CACF,CAAC;AACH,CAAC,CAAC;AACFlB,MAAM,CAAC+B,WAAW,GAAG,QAAQ;AAE7B,SAAS/B,MAAM,EAAET,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}