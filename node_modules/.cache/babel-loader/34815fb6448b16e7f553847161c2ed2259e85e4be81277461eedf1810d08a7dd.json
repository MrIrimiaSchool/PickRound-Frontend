{"ast":null,"code":"import { analyzeBreakpoints } from '@chakra-ui/utils';\nimport { createThemeVars } from './create-theme-vars.mjs';\nimport { omitVars } from './theme-tokens.mjs';\nfunction toCSSVar(rawTheme) {\n  const theme = omitVars(rawTheme);\n  const {\n    /**\r\n     * This is more like a dictionary of tokens users will type `green.500`,\r\n     * and their equivalent css variable.\r\n     */\n    cssMap,\n    /**\r\n     * The extracted css variables will be stored here, and used in\r\n     * the emotion's <Global/> component to attach variables to `:root`\r\n     */\n    cssVars\n  } = createThemeVars(theme);\n  const defaultCssVars = {\n    \"--chakra-ring-inset\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-ring-offset-width\": \"0px\",\n    \"--chakra-ring-offset-color\": \"#fff\",\n    \"--chakra-ring-color\": \"rgba(66, 153, 225, 0.6)\",\n    \"--chakra-ring-offset-shadow\": \"0 0 #0000\",\n    \"--chakra-ring-shadow\": \"0 0 #0000\",\n    \"--chakra-space-x-reverse\": \"0\",\n    \"--chakra-space-y-reverse\": \"0\"\n  };\n  Object.assign(theme, {\n    __cssVars: {\n      ...defaultCssVars,\n      ...cssVars\n    },\n    __cssMap: cssMap,\n    __breakpoints: analyzeBreakpoints(theme.breakpoints)\n  });\n  return theme;\n}\nexport { toCSSVar };","map":{"version":3,"names":["analyzeBreakpoints","createThemeVars","omitVars","toCSSVar","rawTheme","theme","cssMap","cssVars","defaultCssVars","Object","assign","__cssVars","__cssMap","__breakpoints","breakpoints"],"sources":["C:/Users/INTEL/PickRound/pickround-frontend/node_modules/@chakra-ui/styled-system/dist/esm/create-theme-vars/to-css-var.mjs"],"sourcesContent":["import { analyzeBreakpoints } from '@chakra-ui/utils';\r\nimport { createThemeVars } from './create-theme-vars.mjs';\r\nimport { omitVars } from './theme-tokens.mjs';\r\n\r\nfunction toCSSVar(rawTheme) {\r\n  const theme = omitVars(rawTheme);\r\n  const {\r\n    /**\r\n     * This is more like a dictionary of tokens users will type `green.500`,\r\n     * and their equivalent css variable.\r\n     */\r\n    cssMap,\r\n    /**\r\n     * The extracted css variables will be stored here, and used in\r\n     * the emotion's <Global/> component to attach variables to `:root`\r\n     */\r\n    cssVars\r\n  } = createThemeVars(theme);\r\n  const defaultCssVars = {\r\n    \"--chakra-ring-inset\": \"var(--chakra-empty,/*!*/ /*!*/)\",\r\n    \"--chakra-ring-offset-width\": \"0px\",\r\n    \"--chakra-ring-offset-color\": \"#fff\",\r\n    \"--chakra-ring-color\": \"rgba(66, 153, 225, 0.6)\",\r\n    \"--chakra-ring-offset-shadow\": \"0 0 #0000\",\r\n    \"--chakra-ring-shadow\": \"0 0 #0000\",\r\n    \"--chakra-space-x-reverse\": \"0\",\r\n    \"--chakra-space-y-reverse\": \"0\"\r\n  };\r\n  Object.assign(theme, {\r\n    __cssVars: { ...defaultCssVars, ...cssVars },\r\n    __cssMap: cssMap,\r\n    __breakpoints: analyzeBreakpoints(theme.breakpoints)\r\n  });\r\n  return theme;\r\n}\r\n\r\nexport { toCSSVar };\r\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,kBAAkB;AACrD,SAASC,eAAe,QAAQ,yBAAyB;AACzD,SAASC,QAAQ,QAAQ,oBAAoB;AAE7C,SAASC,QAAQA,CAACC,QAAQ,EAAE;EAC1B,MAAMC,KAAK,GAAGH,QAAQ,CAACE,QAAQ,CAAC;EAChC,MAAM;IACJ;AACJ;AACA;AACA;IACIE,MAAM;IACN;AACJ;AACA;AACA;IACIC;EACF,CAAC,GAAGN,eAAe,CAACI,KAAK,CAAC;EAC1B,MAAMG,cAAc,GAAG;IACrB,qBAAqB,EAAE,iCAAiC;IACxD,4BAA4B,EAAE,KAAK;IACnC,4BAA4B,EAAE,MAAM;IACpC,qBAAqB,EAAE,yBAAyB;IAChD,6BAA6B,EAAE,WAAW;IAC1C,sBAAsB,EAAE,WAAW;IACnC,0BAA0B,EAAE,GAAG;IAC/B,0BAA0B,EAAE;EAC9B,CAAC;EACDC,MAAM,CAACC,MAAM,CAACL,KAAK,EAAE;IACnBM,SAAS,EAAE;MAAE,GAAGH,cAAc;MAAE,GAAGD;IAAQ,CAAC;IAC5CK,QAAQ,EAAEN,MAAM;IAChBO,aAAa,EAAEb,kBAAkB,CAACK,KAAK,CAACS,WAAW;EACrD,CAAC,CAAC;EACF,OAAOT,KAAK;AACd;AAEA,SAASF,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}