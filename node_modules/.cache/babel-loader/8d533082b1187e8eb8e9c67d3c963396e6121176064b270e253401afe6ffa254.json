{"ast":null,"code":"import { walkObject } from '@chakra-ui/utils';\nimport { pseudoPropNames } from '../pseudos.mjs';\nimport { extractTokens, extractSemanticTokens } from './theme-tokens.mjs';\nfunction flattenTokens(theme) {\n  const tokens = extractTokens(theme);\n  const semanticTokens = extractSemanticTokens(theme);\n  const isSemanticCondition = key =>\n  // @ts-ignore\n  pseudoPropNames.includes(key) || \"default\" === key;\n  const result = {};\n  walkObject(tokens, (value, path) => {\n    if (value == null) return;\n    result[path.join(\".\")] = {\n      isSemantic: false,\n      value\n    };\n  });\n  walkObject(semanticTokens, (value, path) => {\n    if (value == null) return;\n    result[path.join(\".\")] = {\n      isSemantic: true,\n      value\n    };\n  }, {\n    stop: value => Object.keys(value).every(isSemanticCondition)\n  });\n  return result;\n}\nexport { flattenTokens };","map":{"version":3,"names":["walkObject","pseudoPropNames","extractTokens","extractSemanticTokens","flattenTokens","theme","tokens","semanticTokens","isSemanticCondition","key","includes","result","value","path","join","isSemantic","stop","Object","keys","every"],"sources":["C:/Users/INTEL/PickRound/pickround-frontend/node_modules/@chakra-ui/styled-system/dist/esm/create-theme-vars/flatten-tokens.mjs"],"sourcesContent":["import { walkObject } from '@chakra-ui/utils';\r\nimport { pseudoPropNames } from '../pseudos.mjs';\r\nimport { extractTokens, extractSemanticTokens } from './theme-tokens.mjs';\r\n\r\nfunction flattenTokens(theme) {\r\n  const tokens = extractTokens(theme);\r\n  const semanticTokens = extractSemanticTokens(theme);\r\n  const isSemanticCondition = (key) => (\r\n    // @ts-ignore\r\n    pseudoPropNames.includes(key) || \"default\" === key\r\n  );\r\n  const result = {};\r\n  walkObject(tokens, (value, path) => {\r\n    if (value == null)\r\n      return;\r\n    result[path.join(\".\")] = { isSemantic: false, value };\r\n  });\r\n  walkObject(\r\n    semanticTokens,\r\n    (value, path) => {\r\n      if (value == null)\r\n        return;\r\n      result[path.join(\".\")] = { isSemantic: true, value };\r\n    },\r\n    {\r\n      stop: (value) => Object.keys(value).every(isSemanticCondition)\r\n    }\r\n  );\r\n  return result;\r\n}\r\n\r\nexport { flattenTokens };\r\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,eAAe,QAAQ,gBAAgB;AAChD,SAASC,aAAa,EAAEC,qBAAqB,QAAQ,oBAAoB;AAEzE,SAASC,aAAaA,CAACC,KAAK,EAAE;EAC5B,MAAMC,MAAM,GAAGJ,aAAa,CAACG,KAAK,CAAC;EACnC,MAAME,cAAc,GAAGJ,qBAAqB,CAACE,KAAK,CAAC;EACnD,MAAMG,mBAAmB,GAAIC,GAAG;EAC9B;EACAR,eAAe,CAACS,QAAQ,CAACD,GAAG,CAAC,IAAI,SAAS,KAAKA,GAChD;EACD,MAAME,MAAM,GAAG,CAAC,CAAC;EACjBX,UAAU,CAACM,MAAM,EAAE,CAACM,KAAK,EAAEC,IAAI,KAAK;IAClC,IAAID,KAAK,IAAI,IAAI,EACf;IACFD,MAAM,CAACE,IAAI,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG;MAAEC,UAAU,EAAE,KAAK;MAAEH;IAAM,CAAC;EACvD,CAAC,CAAC;EACFZ,UAAU,CACRO,cAAc,EACd,CAACK,KAAK,EAAEC,IAAI,KAAK;IACf,IAAID,KAAK,IAAI,IAAI,EACf;IACFD,MAAM,CAACE,IAAI,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG;MAAEC,UAAU,EAAE,IAAI;MAAEH;IAAM,CAAC;EACtD,CAAC,EACD;IACEI,IAAI,EAAGJ,KAAK,IAAKK,MAAM,CAACC,IAAI,CAACN,KAAK,CAAC,CAACO,KAAK,CAACX,mBAAmB;EAC/D,CACF,CAAC;EACD,OAAOG,MAAM;AACf;AAEA,SAASP,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}