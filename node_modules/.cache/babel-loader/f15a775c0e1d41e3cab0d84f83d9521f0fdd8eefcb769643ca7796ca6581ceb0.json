{"ast":null,"code":"'use client';\n\nimport { mergeRefs } from '@chakra-ui/hooks';\nimport { createContext } from '@chakra-ui/utils';\nimport { useState, useRef } from 'react';\nimport { DescendantsManager } from './descendant.mjs';\nimport { useSafeLayoutEffect, cast } from './utils.mjs';\nfunction createDescendantContext() {\n  const [DescendantsContextProvider, useDescendantsContext] = createContext({\n    name: \"DescendantsProvider\",\n    errorMessage: \"useDescendantsContext must be used within DescendantsProvider\"\n  });\n  const useDescendant = options => {\n    const descendants = useDescendantsContext();\n    const [index, setIndex] = useState(-1);\n    const ref = useRef(null);\n    useSafeLayoutEffect(() => {\n      return () => {\n        if (!ref.current) return;\n        descendants.unregister(ref.current);\n      };\n    }, []);\n    useSafeLayoutEffect(() => {\n      if (!ref.current) return;\n      const dataIndex = Number(ref.current.dataset[\"index\"]);\n      if (index != dataIndex && !Number.isNaN(dataIndex)) {\n        setIndex(dataIndex);\n      }\n    });\n    const refCallback = options ? cast(descendants.register(options)) : cast(descendants.register);\n    return {\n      descendants,\n      index,\n      enabledIndex: descendants.enabledIndexOf(ref.current),\n      register: mergeRefs(refCallback, ref)\n    };\n  };\n  const useDescendants = () => {\n    const descendants = useRef(new DescendantsManager());\n    useSafeLayoutEffect(() => {\n      return () => descendants.current.destroy();\n    });\n    return descendants.current;\n  };\n  return [\n  // context provider\n  DescendantsContextProvider,\n  // call this when you need to read from context\n  useDescendantsContext,\n  // descendants state information, to be called and passed to `ContextProvider`\n  useDescendants,\n  // descendant index information\n  useDescendant];\n}\nexport { createDescendantContext };","map":{"version":3,"names":["mergeRefs","createContext","useState","useRef","DescendantsManager","useSafeLayoutEffect","cast","createDescendantContext","DescendantsContextProvider","useDescendantsContext","name","errorMessage","useDescendant","options","descendants","index","setIndex","ref","current","unregister","dataIndex","Number","dataset","isNaN","refCallback","register","enabledIndex","enabledIndexOf","useDescendants","destroy"],"sources":["C:/Users/INTEL/PickRound/pickround-frontend/node_modules/@chakra-ui/react/dist/esm/descendant/use-descendant.mjs"],"sourcesContent":["'use client';\r\nimport { mergeRefs } from '@chakra-ui/hooks';\r\nimport { createContext } from '@chakra-ui/utils';\r\nimport { useState, useRef } from 'react';\r\nimport { DescendantsManager } from './descendant.mjs';\r\nimport { useSafeLayoutEffect, cast } from './utils.mjs';\r\n\r\nfunction createDescendantContext() {\r\n  const [DescendantsContextProvider, useDescendantsContext] = createContext({\r\n    name: \"DescendantsProvider\",\r\n    errorMessage: \"useDescendantsContext must be used within DescendantsProvider\"\r\n  });\r\n  const useDescendant = (options) => {\r\n    const descendants = useDescendantsContext();\r\n    const [index, setIndex] = useState(-1);\r\n    const ref = useRef(null);\r\n    useSafeLayoutEffect(() => {\r\n      return () => {\r\n        if (!ref.current)\r\n          return;\r\n        descendants.unregister(ref.current);\r\n      };\r\n    }, []);\r\n    useSafeLayoutEffect(() => {\r\n      if (!ref.current)\r\n        return;\r\n      const dataIndex = Number(ref.current.dataset[\"index\"]);\r\n      if (index != dataIndex && !Number.isNaN(dataIndex)) {\r\n        setIndex(dataIndex);\r\n      }\r\n    });\r\n    const refCallback = options ? cast(descendants.register(options)) : cast(descendants.register);\r\n    return {\r\n      descendants,\r\n      index,\r\n      enabledIndex: descendants.enabledIndexOf(ref.current),\r\n      register: mergeRefs(refCallback, ref)\r\n    };\r\n  };\r\n  const useDescendants = () => {\r\n    const descendants = useRef(new DescendantsManager());\r\n    useSafeLayoutEffect(() => {\r\n      return () => descendants.current.destroy();\r\n    });\r\n    return descendants.current;\r\n  };\r\n  return [\r\n    // context provider\r\n    DescendantsContextProvider,\r\n    // call this when you need to read from context\r\n    useDescendantsContext,\r\n    // descendants state information, to be called and passed to `ContextProvider`\r\n    useDescendants,\r\n    // descendant index information\r\n    useDescendant\r\n  ];\r\n}\r\n\r\nexport { createDescendantContext };\r\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AACxC,SAASC,kBAAkB,QAAQ,kBAAkB;AACrD,SAASC,mBAAmB,EAAEC,IAAI,QAAQ,aAAa;AAEvD,SAASC,uBAAuBA,CAAA,EAAG;EACjC,MAAM,CAACC,0BAA0B,EAAEC,qBAAqB,CAAC,GAAGR,aAAa,CAAC;IACxES,IAAI,EAAE,qBAAqB;IAC3BC,YAAY,EAAE;EAChB,CAAC,CAAC;EACF,MAAMC,aAAa,GAAIC,OAAO,IAAK;IACjC,MAAMC,WAAW,GAAGL,qBAAqB,CAAC,CAAC;IAC3C,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC,CAAC;IACtC,MAAMe,GAAG,GAAGd,MAAM,CAAC,IAAI,CAAC;IACxBE,mBAAmB,CAAC,MAAM;MACxB,OAAO,MAAM;QACX,IAAI,CAACY,GAAG,CAACC,OAAO,EACd;QACFJ,WAAW,CAACK,UAAU,CAACF,GAAG,CAACC,OAAO,CAAC;MACrC,CAAC;IACH,CAAC,EAAE,EAAE,CAAC;IACNb,mBAAmB,CAAC,MAAM;MACxB,IAAI,CAACY,GAAG,CAACC,OAAO,EACd;MACF,MAAME,SAAS,GAAGC,MAAM,CAACJ,GAAG,CAACC,OAAO,CAACI,OAAO,CAAC,OAAO,CAAC,CAAC;MACtD,IAAIP,KAAK,IAAIK,SAAS,IAAI,CAACC,MAAM,CAACE,KAAK,CAACH,SAAS,CAAC,EAAE;QAClDJ,QAAQ,CAACI,SAAS,CAAC;MACrB;IACF,CAAC,CAAC;IACF,MAAMI,WAAW,GAAGX,OAAO,GAAGP,IAAI,CAACQ,WAAW,CAACW,QAAQ,CAACZ,OAAO,CAAC,CAAC,GAAGP,IAAI,CAACQ,WAAW,CAACW,QAAQ,CAAC;IAC9F,OAAO;MACLX,WAAW;MACXC,KAAK;MACLW,YAAY,EAAEZ,WAAW,CAACa,cAAc,CAACV,GAAG,CAACC,OAAO,CAAC;MACrDO,QAAQ,EAAEzB,SAAS,CAACwB,WAAW,EAAEP,GAAG;IACtC,CAAC;EACH,CAAC;EACD,MAAMW,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMd,WAAW,GAAGX,MAAM,CAAC,IAAIC,kBAAkB,CAAC,CAAC,CAAC;IACpDC,mBAAmB,CAAC,MAAM;MACxB,OAAO,MAAMS,WAAW,CAACI,OAAO,CAACW,OAAO,CAAC,CAAC;IAC5C,CAAC,CAAC;IACF,OAAOf,WAAW,CAACI,OAAO;EAC5B,CAAC;EACD,OAAO;EACL;EACAV,0BAA0B;EAC1B;EACAC,qBAAqB;EACrB;EACAmB,cAAc;EACd;EACAhB,aAAa,CACd;AACH;AAEA,SAASL,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}